{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","colors","useState","data","setData","updateQuote","a","fetch","response","json","statusCode","statusMessage","ok","Error","document","body","style","backgroundColor","color","getElementById","getRandomNum","length","console","error","content","min","max","Math","ceil","floor","random","useEffect","log","id","className","author","href","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"wRAkEeA,MAhEf,WAEE,IAAIC,EAAS,CACX,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGF,EAAwBC,mBAAS,MAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAjBa,SAmBIC,IAnBJ,2EAmBX,oCAAAC,EAAA,+EAE+BC,MAAM,kCAFrC,cAEcC,EAFd,gBAG2DA,EAASC,OAHpE,mBAGeC,EAHf,EAGeA,WAAYC,EAH3B,EAG2BA,cAAkBR,EAH7C,iBAIaK,EAASI,GAJtB,uBAIgC,IAAIC,MAAJ,UAAaH,EAAb,YAA2BC,IAJ3D,QAKQP,EAAQD,GACRW,SAASC,KAAKC,MAAMC,gBAClBH,SAASC,KAAKC,MAAME,MACpBJ,SAASK,eAAe,aAAaH,MAAMC,gBAC3ChB,EAAOmB,EAAa,EAAGnB,EAAOoB,OAAS,IATjD,kDAWQC,QAAQC,MAAR,MACAnB,EAAQ,CAACoB,QAAS,iCAZ1B,2DAnBW,sBAmCX,IAAMJ,EAAe,SAACK,EAAKC,GAGzB,OAFAD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,EAAM,GAAKA,IAQtD,OALAM,qBAAU,WACRT,QAAQU,IAAI,kBACZ3B,MACC,IAEEF,EAGH,sBAAK8B,GAAG,YAAR,UACE,qBAAKA,GAAG,OAAR,SACI,8BAAG,mBAAGC,UAAU,sBAAhB,IAA0C/B,EAAKqB,aAEnD,qBAAKS,GAAG,SAAR,SACE,mCAAM9B,EAAKgC,YAEb,sBAAKF,GAAG,UAAR,UACE,mBAAGG,KAAK,GAAGF,UAAU,SAArB,SAA8B,mBAAGA,UAAU,qBAC3C,wBAAQD,GAAG,YAAYI,QAAShC,EAAhC,6BAZY,MCpCPiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnC,SAASK,eAAe,SAM1BmB,M","file":"static/js/main.d9028484.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\nfunction App() {\n\n  var colors = [\n    '#16a085',\n    '#27ae60',\n    '#2c3e50',\n    '#f39c12',\n    '#e74c3c',\n    '#9b59b6',\n    '#FB6964',\n    '#342224',\n    '#472E32',\n    '#BDBB99',\n    '#77B1A9',\n    '#73A857'\n  ];\n\n  const [data, setData] = useState(null);\n\n    async function updateQuote() {\n        try {\n            const response = await fetch(\"https://api.quotable.io/random\");\n            const {statusCode, statusMessage, ...data} = await response.json();\n            if (!response.ok) throw new Error(`${statusCode} ${statusMessage}`);\n            setData(data);\n            document.body.style.backgroundColor = \n              document.body.style.color = \n              document.getElementById(\"new-quote\").style.backgroundColor = \n              colors[getRandomNum(0, colors.length - 1)];\n        } catch (error) {\n            console.error(error);\n            setData({content: \"Oops... Something went wrong\"});\n        }\n    }\n\n    const getRandomNum = (min, max) => {\n      min = Math.ceil(min);\n      max = Math.floor(max);\n      return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n\n    useEffect(() => {\n      console.log('use effect ran');\n      updateQuote();\n    }, []);\n\n    if (!data) return null;\n\n    return ( \n      <div id=\"quote-box\">\n        <div id=\"text\">\n            <p><i className=\"fas fa-quote-left\"></i> {data.content}</p>\n        </div>\n        <div id=\"author\">\n          <p>- {data.author}</p>\n        </div>\n        <div id=\"buttons\">\n          <a href=\"\" className=\"button\"><i className=\"fab fa-twitter\"></i></a>\n          <button id=\"new-quote\" onClick={updateQuote}>New Quote</button>\n        </div>\n      </div>\n     );\n}\n\nexport default App;\n\n// Sample data from https://api.quotable.io/random:\n// {\"_id\":\"Oh-e1-oygRPX\",\"tags\":[\"famous-quotes\"],\"content\":\"To be wronged is nothing unless you continue to remember it.\",\"author\":\"Confucius\",\"authorSlug\":\"confucius\",\"length\":60,\"dateAdded\":\"2021-05-12\",\"dateModified\":\"2021-05-12\"}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}